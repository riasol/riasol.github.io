{"version":3,"sources":["components/DateSelector.tsx","components/Meteogram.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["DateSelector","props","state","day","moment","format","hour","hour$","ReplaySubject","day$","combineLatest","subscribe","handleDateChange","next","Option","Select","hours","split","Fragment","onChange","date","defaultValue","this","showTime","val","map","value","key","Component","Meteogram","col","row","console","info","alt","src","App","setState","Date","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4WAmDeA,E,YA5BX,WAAYC,GAAe,IAAD,8BACtB,4CAAMA,KARVC,MAAyB,CACrBC,IAAKC,MAASC,OAAO,YACrBC,KAAM,MAKgB,EAH1BC,MAAQ,IAAIC,IAAsB,GAGR,EAF1BC,KAAO,IAAID,IAAsB,GAI7BE,YAAc,CAAC,EAAKD,KAAM,EAAKF,QAC1BI,WAAU,YAAkB,IAAD,mBAAfR,EAAe,KAAVG,EAAU,KACxB,EAAKL,MAAMW,iBAAX,UAA+BT,GAA/B,OAAqCG,OAE7C,EAAKG,KAAKI,KAAK,EAAKX,MAAMC,KAC1B,EAAKI,MAAMM,KAAK,EAAKX,MAAMI,MAPL,E,sEAUhB,IAAD,OACEQ,EAAUC,IAAVD,OACDE,EAAQ,cAAcC,MAAM,KAClC,OACI,kBAAC,IAAMC,SAAP,KACI,kBAAC,IAAD,CAAYC,SAAU,SAACC,GACnB,EAAKX,KAAKI,KAAV,OAAeO,QAAf,IAAeA,OAAf,EAAeA,EAAMf,OAAO,cAC7BgB,aAAcjB,IAAOkB,KAAKpB,MAAMC,KAAMoB,UAAU,EAAOlB,OAAQ,eAHtE,WAKI,kBAAC,IAAD,CAAQc,SAAU,SAACK,GACf,EAAKjB,MAAMM,KAAKW,IACjBH,aAAcC,KAAKpB,MAAMI,MACvBU,EAAMS,KAAI,SAAAnB,GAAI,OAAI,kBAACQ,EAAD,CAAQY,MAAOpB,EAAMqB,IAAKrB,GAAOA,Y,GA9B7CsB,a,SCAZC,E,iLAXD,IAAD,iBACwBP,KAAKrB,OAA3B6B,EADF,EACEA,IAAKC,EADP,EACOA,IAAKX,EADZ,EACYA,KACjB,OAAKA,GAGLY,QAAQC,KAAR,4BAAkCb,IAC1B,yBAAKc,IAAI,YACJC,IAAG,qEAAgEf,EAAhE,gBAA4EW,EAA5E,gBAAuFD,EAAvF,eAJL,S,GALKF,aCsBTQ,E,2MAbXlC,MAAQ,CAACkB,KAAM,M,EACfR,iBAAmB,SAACQ,GAChB,EAAKiB,SAAS,CAACjB,U,wEAIf,OAAQ,6BACJ,kBAAC,EAAD,CAAcA,KAAMhB,IAAO,IAAIkC,MAAS1B,iBAAkBU,KAAKV,mBAC/D,kBAAC,EAAD,CAAWQ,KAAME,KAAKpB,MAAMkB,KAAMU,IAAK,IAAKC,IAAK,W,GAT3CH,aCEEW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.779012d2.chunk.js","sourcesContent":["import React, {Component} from \"react\";\r\nimport {DatePicker, Select} from \"antd\";\r\nimport moment from 'moment';\r\nimport {combineLatest, ReplaySubject} from \"rxjs\";\r\n\r\ninterface Props {\r\n    date: moment.Moment;\r\n    handleDateChange: (dateString: string) => void;\r\n}\r\n\r\ninterface State {\r\n    day: string | undefined;\r\n    hour: string;\r\n}\r\n\r\nclass DateSelector extends Component<Props, State> {\r\n    state: Readonly<State> = {\r\n        day: moment().format('YYYYMMDD'),\r\n        hour: '00'\r\n    };\r\n    hour$ = new ReplaySubject<string>(1);\r\n    day$ = new ReplaySubject<string>(1);\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        combineLatest([this.day$, this.hour$])\r\n            .subscribe(([day, hour]) => {\r\n                this.props.handleDateChange(`${day}${hour}`)\r\n            });\r\n        this.day$.next(this.state.day);\r\n        this.hour$.next(this.state.hour);\r\n    }\r\n\r\n    render() {\r\n        const {Option} = Select;\r\n        const hours = '00 06 12 18'.split(' ');\r\n        return (\r\n            <React.Fragment>\r\n                <DatePicker onChange={(date) => {\r\n                    this.day$.next(date?.format('YYYYMMDD'))\r\n                }} defaultValue={moment(this.state.day)} showTime={false} format={'YYYY-MM-DD'}/>\r\n                godzina:\r\n                <Select onChange={(val: any) => {\r\n                    this.hour$.next(val)\r\n                }} defaultValue={this.state.hour}>\r\n                    {hours.map(hour => <Option value={hour} key={hour}>{hour}</Option>)}\r\n                </Select>\r\n            </React.Fragment>)\r\n    }\r\n}\r\n\r\nexport default DateSelector;","import React, {Component} from \"react\";\r\n\r\nclass Meteogram extends Component<{ col: number, row: number, date: string | null }> {\r\n\r\n    render() {\r\n        const {col, row, date} = {...this.props}\r\n        if (!date) {\r\n            return null\r\n        }\r\n        console.info(`New meteogram for ${date}`)\r\n        return (<img alt=\"meteogram\"\r\n                     src={`http://www.meteo.pl/um/metco/mgram_pict.php?ntype=0u&fdate=${date}&row=${row}&col=${col}&lang=pl`}/>)\r\n    }\r\n}\r\n\r\nexport default Meteogram","import React, {Component} from 'react';\nimport './App.css';\nimport DateSelector from \"./components/DateSelector\";\nimport moment from \"moment\";\nimport Meteogram from \"./components/Meteogram\";\n\ninterface State {\n    date: string | null;\n}\n\nclass App extends Component<{}, State> {\n    state = {date: null}\n    handleDateChange = (date: string) => {\n        this.setState({date})\n    }\n\n    render() {\n        return (<div>\n            <DateSelector date={moment(new Date())} handleDateChange={this.handleDateChange}/>\n            <Meteogram date={this.state.date} col={241} row={458}></Meteogram>\n        </div>)\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}